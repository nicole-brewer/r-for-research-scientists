[
["index.html", "R for Research Scientists Preamble", " R for Research Scientists Nicole Brewer 2019-11-26 Preamble Who is this book for? There are already many great tutorials out there for building packages in R, but they are generally too comprehensive, and cater to project administrators. This book is intended for researchers who contriubute code to an R project, and leaves out details irrelevant to this audience. If you are the administrator for you project or you just want to know more about what’s going on behind the hood, each section begins by explaining the why of standard practices, and includes resources that explain how to implement them. What you won’t learn. How to program in R. What will you learn? How to contribute to a well structured project. Why this worth your precious time? Reading this book will save you from more headaches and time-wasters than you can imagine, especially as your project grows in size and complexity. "],
["git.html", "1 Git and Github", " 1 Git and Github The what and why of version control (specific to R!) can be found here "],
["test.html", "2 Unit Testing", " 2 Unit Testing Likely as not, you have already written scripts that demonstrate that your script runs and produces a desired results. Unit testing, via the testthat package (Wickham 2011), formalizes this process and automates many of these scripts at once to make running a comprehensive test set easy to do. Read up about testing and automated checking "],
["doc.html", "3 Documentation", " 3 Documentation "],
["pack.html", "4 Packages", " 4 Packages R packages are the vehicle for distributing working code to other users and their machines. Building a package turns a developer’s human readable code into binary that can be transfered to another user’s computer, and then installed so that package becomes available to the user. "],
["install-development-tools.html", "4.1 Install Development Tools", " 4.1 Install Development Tools Buiding an R package requires extra development software that does not come with R or RStudio. 4.1.1 Mac: XCode In your terminal, execute xcode-select --install, and if you are prompted to install command line developer tools, select “Install” and “Agree”. 4.1.2 Windows: Rtools Download and run the recommended Rtools.exe file from https://cran.r-project.org/bin/windows/Rtools/ with the default selections. 4.1.3 Linux: R development tools package Install the R development tools package corresponding to your system. 4.1.4 Verify Success library(devtools) has_devel() "],
["building-the-package.html", "4.2 Building the package", " 4.2 Building the package 4.2.1 When? You should always clean and build the package (and resolve any errors or warnings) before making a commit. 4.2.2 Clean In the RStudio Toolbar, select “Build” &gt;&gt; “Clean”. This removes unneccesssary files that were created from a previous build. 4.2.3 Build R CMD check in the terminal, devtools::check() in the console, and Ctrl/Cmd + Shift + E in RStudio all deploy a function that checks your package for common problems and makes sure a package includes everything in needs to play well with others upon distribution. Errors and warnings produced by the check() funciton should be resolved before every commit. This workflow comes from the book R packages (Wickham and Bryan 2019): Run the check() function Fix the first error or warning Repeat steps (1) and (2) until all errors and warnings are resolved. Now in order to be able to use the package, use the devtools::install() function or Ctrl/Cmd + Shift + B to load the current version of the package into RStudio. Run the install() function "],
["references.html", "References", " References Wickham, Hadley. 2011. “Testthat: Get Started with Testing.” The R Journal 3: 5–10. https://journal.r-project.org/archive/2011-1/RJournal_2011-1_Wickham.pdf. Wickham, Hadley, and Jennifer Bryan. 2019. R Packages. https://r-pkgs.org/. "]
]
